## 0.3.0 / ...

  * BUG: MetaStore hits but EntityStore misses. This would 500 previously; now
    we detect it and act as if the MetaStore missed as well.
  * Implement low level #purge method on all concrete entity store
    classes -- removes the entity body corresponding to the SHA1 key
    provided and returns nil.
  * Basically sane handling of HEAD requests. A HEAD request is never passed
    through to the backend except when transitioning with pass!. This means
    that the cache responds to HEAD requests without invoking the backend at
    all when the cached entry is fresh. When no cache entry exists, or the
    cached entry is stale and can be validated, the backend is invoked with
    a GET request and the HEAD handling is handled right before the response
    is delivered upstream.
  * Cache responses that have a Transfer-Encoding. The current implementation
    caches the encoded value and reproduces the message with the same
    Transfer-Encoding header on subsequent cache hits. This goes against
    RFC 2616, which says that intermediaries must fully decode responses with
    a Transfer-Encoding header before passing them on (though they may re-encode
    or apply a different encoding). This seems less relevant to Rack::Cache,
    however, since we're not a true "hop". We'll see how it goes and act
    accordingly.
  * BUG: The Age response header was not being set properly when a stale
    entry was validated. This would result in Age values that exceeded
    the freshness lifetime in responses.
  * BUG: A cached entry in a heap meta store could be unintentionally
    modified by request processing since the cached objects were being
    returned directly. The result was typically missing/incorrect header
    values (e.g., missing Content-Type header). [dkubb]
  * BUG: 304 responses should not include entity headers (especially
    Content-Length). This is causing Safari/WebKit weirdness on 304
    responses.
  * BUG: The If-None-Match header was being ignored, causing the cache
    to send 200 responses to matching conditional GET requests.

## 0.2.0 / 2008-10-24 / Initial Release

  * Document events and transitions in `rack/cache/config/default.rb`
  * Basic logging support (`trace`, `warn`, `info`, `error` from within Context)
  * EntityStore: store entity bodies keyed by SHA
  * MetaStore: store response headers keyed by URL
  * Last-Modified/ETag validation
  * Vary support
  * Implement error! transition
  * New Rack::Cache::Core
  * memcached meta and entity store implementations
  * URI based storage configuration
  * Read options from Rack env if present (rack-cache.XXX keys)
  * `object` is now `entry`
  * Documentation framework and website
  * Document storage areas and implementations
  * Document configuration/events

## 0.1.0 / 2008-07-21 / Proof of concept (unreleased)

  * Basic core with event support
  * `#import` method for bringing in config files
  * Freshness based expiration
  * RFC 2616 If-Modified-Since based validation
  * A horribly shitty storage back-end (Hash in mem)
  * Don't cache hop-by-hop headers: Connection, Keep-Alive, Proxy-Authenticate,
    Proxy-Authorization, TE, Trailers, Transfer-Encoding, Upgrade

## 0.4

  - Support request-side Cache-Control directives (especially no-cache but also
    max-age, max-stale, etc.)
  - Move breakers.rb configuration file into rack-contrib as a middleware
    component. So trivial.
  - Cache invalidation on PUT, POST, DELETE.
    - Invalidate at the request URI; or, anything that's "near" the request URI.
    - Invalidate at the URI of the Location or Content-Location response header.
  - Sample apps: Rack, Rails, Sinatra, Merb, etc.

## Backlog

  - Add missing Expires header if we have a max-age.
  - Purge/invalidate specific cache entries
  - Purge/invalidate everything
  - Maximum size of cached entity
  - Last-Modified factor: requests that have a Last-Modified header but no Expires
    header have a TTL assigned based on the last modified age of the response:
    TTL = (Age * Factor), or, 1h  = (10h * 0.1)
  - Run under multiple-threads with an option to lock before making requests
    to the backend. The idea is to be able to serve requests from cache in
    separate threads. This should probably be implemented as a separate
    middleware component.
  - Consider implementing ESI (http://www.w3.org/TR/esi-lang). This should
    probably be implemented as a separate middleware component.
  - Sqlite3 (meta store)
  - stale-while-revalidate
  - Serve cached copies when down (see: stale-if-error) - e.g., database
    connection drops and the cache takes over what it can. 

## 0.1

  * Proof of concept
  * Store everything in memory

## 0.2

  * Baseline caching logic moved out of config, into Rack::Cache::Core
  * Document events and transitions
  * Basic logging
  * BUG: negative TTL
  * EntityStore: entity bodies by SHA
  * MetaStore: response headers by URL
  * Vary support MetaStore
  - Vary tests
  - Add Vary support to Wink
  - breakers.rb tests

## 0.3

  - Document request, response, cached object
  - Canonicalized URL for cache key:
    - sorts params by key, then value
    - urlencodes /[^ A-Za-z0-9_.-]/ host, path, and param key/value
  - Memcached (meta and entity store)
  - Sqlite3 (meta and entity store)
  - Automatic cache invalidation on PUT, POST, DELETE.
    - Invalidate at the request URI; or, anything that's "near" the request URI.
    - Invalidate at the URI of the Location or Content-Location response header.
  - Purge/invalidate specific cache entries
  - Purge/invalidate everything

## Backlog

  - Maximum size of cached entity
  - Last-Modified factor: requests that have a Last-Modified header but no Expires
    header have a TTL assigned based on the last modified age of the response:
    TTL = (Age * Factor), or, 1h  = (10h * 0.1)
  - Read options from Rack env if present (rack.cache.XXX keys)
  - I wonder if it would be possible to run in threaded mode but with an
    option to lock before making requests to the backend. The idea is to be
    able to serve requests from cache in separate threads. This should
    probably be implemented as a separate middleware component.
  - Support server-specific X-Sendfile (or similar) for delivering cached
    bodies.
  - Serve cached copies when down - e.g., database connection drops and the
    cache takes over what it can.

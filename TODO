## 0.1

  * Proof of concept
  * Store everything in memory

## 0.2

  * Baseline caching logic moved out of config, into Rack::Cache::Core
  * Document events and transitions in rack/cache/config/default.rb
  * Basic logging support.
  * EntityStore: store entity bodies by SHA
  * MetaStore: response headers by URL
  * Add support for Vary
  * ETag validation
  * Implement error transition
  * memcached meta and entity store implementations
  - URL based backing store configuration
    - Disk - file:cache (relative), file://path (absolute), file:~/cache (home)
    - Heap - heap:[object] (object is eval'd for Hash)
    - Memcached - memcached://host:port/[namespace][?option=value&[options=value]]
    - Sqlite3 - sqlite3:///filename[.sqlite3]/[table]
  - Tool to generate config file documentation
  - Document request, response, cached object
  - Sample app

## 0.3

  - BUG: meta store hits but entity misses
  - breakers.rb config and tests
  - no-cache.rb config and tests
  - liberal, conservative, sane caching configs
  - Canonicalized URL for cache key:
    - sorts params by key, then value
    - urlencodes /[^ A-Za-z0-9_.-]/ host, path, and param key/value
  - Support server-specific X-Sendfile (or similar) for delivering cached
    bodies.
  - Sqlite3 (meta store)
  - Automatic cache invalidation on PUT, POST, DELETE.
    - Invalidate at the request URI; or, anything that's "near" the request URI.
    - Invalidate at the URI of the Location or Content-Location response header.

## Backlog

  - Purge/invalidate specific cache entries
  - Purge/invalidate everything
  - Maximum size of cached entity
  - Are we doing HEAD properly?
  - Last-Modified factor: requests that have a Last-Modified header but no Expires
    header have a TTL assigned based on the last modified age of the response:
    TTL = (Age * Factor), or, 1h  = (10h * 0.1)
  - Read options from Rack env if present (rack.cache.XXX keys)
  - I wonder if it would be possible to run in threaded mode but with an
    option to lock before making requests to the backend. The idea is to be
    able to serve requests from cache in separate threads. This should
    probably be implemented as a separate middleware component.
  - stale-while-revalidate
  - Serve cached copies when down (see: stale-if-error) - e.g., database
    connection drops and the cache takes over what it can. 
  - When a cache misses due to Vary, try to validate using the best match. Note
    that you can't do this with a weak validator, so only strong etags can be
    used.
